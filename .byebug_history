exit
product_array.count
product_array[0].count
url
product_array[0]
product_array
publisher_name
product_name
continue
url
exit
product_array.count
product_array
continue
exit
pagination_products.css('img')[0].attributes["data-src"].text
pagination_products.css('img')[0]
pagination_products.css('img')[0].attributes["src"].text
pagination_products.css('img')[2].attributes["src"].text
pagination_products.css('img')[1].attributes["src"].text
pagination_products.css('img')[0].attributes["src"].text
pagination_products.css('img')[0].attributes["src"]
pagination_products.css('div.book-img')[0].attributes["src"]
pagination_products.css('div.book-img')[0].attributes["src"].text
pagination_products.css('div.book-img')[0]
pagination_products.css('div.book-img')
exit
product_array.count
product_array[0].count
product_array[0]
product_array[o]
publisher_array[0]
publisher_array[0].count
publisher_array.count
publisher_array
exit
(total_products.to_f / per_page.to_f)
(total_products.to_f / per_page.to_f).ceil
(total_products.to_f / per_page.to_f).ceil(5)
last_page
product_array.last
product_array.count
continue
product_array.count
continue
product_array.count
continue
product_array.count
continue
product_array.count
continue
publisher_name
product_array.count
product_array
exit
product.count
product = product.merge(@book_summary)
product = product.merge(book)
product
exit
products.count
last_page
url
product_array.count
product_array
publisher_name
product_array[0]
publisher_array[0]
continue
publisher_array[0]
publisher_array.count
exit
publisher_array[0]
publisher_array.count
exit
pub_list.css('h2')[1].text
pub_list.css('h2')[0].text
pub_list.css('h2').text
pub_list.css('h2')
publisher_array.count
exit
publisher_array.count
publisher_array
exit
publisher_array
publisher_array.count
exit
publisher_array
publisher
url
x
publisher_array.count
exit
a = "https://www.rokomari.com/"+pub_list.css('a')[0].attributes["href"].value
pub_list.css('a')[0].attributes["href"].value
pub_list.css('a')[0]
pub_list
pub_list.count
pub_list
exit
parsed_page.css("div.container>ul>li").count
parsed_page.css("div.container>ul>li").first.text
parsed_page.css("div.container>ul>li>a").first.text
parsed_page.css("div.container>ul>li>a").first
parsed_page.css("ul>li>a").first
parsed_page.css("li>a").first
parsed_page.css("li>a").count
parsed_page.css("li>a").text
parsed_page.css("li>a").value
parsed_page.css("li>a")
parsed_page.css("ul.list-inline list-unstyled authorList")
parsed_page.css("ul.list-inline list-unstyled authorList")[0].text
parsed_page.css('#authorList > div:nth-child(5) > ul')[0].text
parsed_page.css('#authorList > div:nth-child(5) > ul')[0].count
parsed_page.css('#authorList > div:nth-child(5)')[0].text
parsed_page.css('#authorList > div:nth-child(5)').text
parsed_page.css('#authorList > div:nth-child(5)')
parsed_page.css('#authorList > div:nth-child(5)').count
parsed_page.css('#authorList > div:nth-child(5) ').count
parsed_page.css('#authorList > div:nth-child(5) > ul').count
parsed_page.css('ul').count
parsed_page.css('ul')[3].text
parsed_page.css('ul')[2].text
parsed_page.css('ul')[1].text
parsed_page.css('ul')[0].text
parsed_page.css('ul').text
parsed_page.css('ul')
exit
a.css
a.css('li')
a.count
a
exit
a.count
a.text
a.value
a
exit
parsed_page.css('li').count
parsed_page.css('li')
pub_list[0].textparsed_page.css('li')
pub_list[0].text
pub_list[0]
url
exit
parsed_page.css('li.breadcrumb-item.active').text
parsed_page.css('li.breadcrumb-item.active')
parsed_page.css('li.breadcrumb-item.active').
parsed_page.css('li.breadcrumb-item.active').text
exit
p.css('img')[0].attributes["src"].text
p.text
p = pagination_parsed_page.css('div.product_single')
exit
continue
publisher
product_array
exit
total_products
continue
st
continue
st
exit
c
c.merge
exit
b1["১"]
b1[১]
b1[0]
z.each {|x| b1[x] }
z.each {|x| b1[z[x]] }
z.each {|x| puts x=x.to_s }
z.each {|x| puts x=x.to_i }
z.each {|x| print x=x.to_i }
z.each {|x| x=x.to_i }
z.each {|x| x }
z
z.each {|x| b1[z[x]] }
z.each {|x| b1[z[x] }
z.each {|x| puts x }
z.each do |x|
z
exit
b1[1]
b1
exit
b
exit
num.nil?
num..nil?
num.value? == nil
num.values == nil
num.value == nil
num.length
ban[0]
x[0]
ban
x
exit
num.split
num.to_a
ban.class
x.class
x.to_a
x
x=ban.split
c
c=ban.split
b
b=ban.split
ban.split!
ban.split.join(',')
ban
ban.join(',')
ban.split(',')
ban.split
ban.slice(',')
ban.strip(',')
ban.strip(,)
c
exit
b
a
exit
b
a
exit
a
exit
continue
exit
exiy
pagination_pub_list[0].css('div.category_info_ct_block').text
pagination_pub_list[0].css('div.category_info_ct_block')
pagination_pub_list[0].css('div.category__info__ct__block')
pagination_pub_list[0]
continue
x
continue
x
continue
x
continue
x
exit
publisher_array.count
continue
publisher_array.count
exit
pub_list.count
b12
url
a12
a
continue
