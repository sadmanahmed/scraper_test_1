exit
total_product = lc(a,'en','bn').to_i
a = driver.find_elements(:class, "product-amount")[0].text.split(" ")[0]
total_product
exit
a
exit
lc(a,'en','bn').to_i
lc a,'en','bn'
lc a,'bn','es'
require 'language_converter'
lc a,'bn','es'
a
a = driver.find_elements(:class, "product-amount")[0].text.split(" ")[0]
driver
driver.find_elements(:class, "product-amount")[0].text.split(" ")[0]
a
exit
driver.find_elements(:class, "product-amount")[0].text.split(" ")[0]
a.split(" ")[0]
a.split(" ")
a
a= driver.find_elements(:class, "product-amount")[0].text
driver.find_elements(:class, "product-amount")[0].text
driver
driver.find_elements(:class, "product-amount").text
exit
require 'selenium-webdriver'
replaceNumbers(booksCount) 
{{ replaceNumbers(booksCount) }}
replaceNumbers(booksCount)
a= parsed_page.css('span.product-amount').text
parsed_page.css('#appMain > div.wrapper > div.content > div > div:nth-child(2) > div.col-xs-12.col-sm-8.col-md-9 > div.filter-section > div:nth-child(2) > div:nth-child(2)')
a= parsed_page.css('span.product-amount').text
a
a.find(replaceNumbers(booksCount))
a[0]
a= parsed_page.css('span.product-amount').text
parsed_page.css('span.product-amount').text
parsed_page.css('span.product-amount')[0].text
parsed_page.css('span.product-amount').text.[0]
parsed_page.css('span.product-amount')[0]
parsed_page.css('span.product-amount').text
parsed_page.css('#appMain > div.wrapper > div.content > div > div:nth-child(2) > div.col-xs-12.col-sm-8.col-md-9 > div.filter-section > div:nth-child(2) > div:nth-child(2)').text
parsed_page.css('#appMain > div.wrapper > div.content > div > div:nth-child(2) > div.col-xs-12.col-sm-8.col-md-9 > div.filter-section > div:nth-child(2) > div:nth-child(2)')
parsed_page.css('span.product-amount').text
parsed_page.css('span.product-amount')
parsed_page
total_products
products.count
exit
products.count
products[0].text.gsub('\n'," ").strip
products[0].text
products[0]
exit
url
exit
h1
exit
product_array[735]
product_array[737]
product_array[120]
product_array[10][key]
product_array[10][keys]
product_array[10]
product_array[0]
exit
h1
exit
reload
h1
continue
s
x
s
x
exit
key
row1[x].to_sym
x
s
key
row1[x].to_sym
x
exit
x
value
key
s
exit
row1
exit
key
row1[x]
exit
reload
key
a[:key]
a[0]
a[1]
a[2]
a
exit
a
exit
h1[value]
h1[key]
h1
h
exit
h
key
 exit
key
row1[1]
row[1]
x
row
key
s
exit
key
s.length
csv.text
csv
s
exit
product_array[1]
continue
product_array[0]
exit
product_array[160]
continue
product_array.last
product_array[2]
product_array[1]
exit
product_array[1]
product_array[0]
product_array[2]
product_array[1]
product_array
continue
product_array
exit
@book_summary
continue
@book_summary
continue
@book_summary
continue
@book_summary
continue
@book_summary
continue
@book_summary
continue
@book_summary
continue
@book_summary
book_summary
exit
book_perser.count
book_perser
scrap_info
exit
scrap_info
continue
scrap_info
continue
scrap_info
continue
scrap_info
continue
scrap_info
continue
scrap_info
continue
scrap_info
continue
scrap_info
continue
scrap_info
exit
scrap_info
continue
scrap_info
value
label
exit
info
value
label
exit
s
value
label
exit
s
v1
k
exit
v1
k
s
v1
k
v1
v2
k
exit
v1
k
s
exit
s
exit
s
v1
k
exit
v
k
exit
key
value
s
key
exit
tr.css('td[1]').text
key
s[1]
s
exit
specification
exit
tr.css('td[2]').text
tr.css('td[1]').text
tr.css('td').last.text
tr.css('td').first.text
tr.css('td').first
tr.css('td')
tr.css('td[2]').text
tr.css('td[1]').text
tr.css('td[0]').text
exit
book_parsed_page.css('#book-additional-specification > table > tr').each do |tr|
exit
book_parsed_page.css('#book-additional-specification > table > tr').each do |tr|
book_parsed_page.css('#book-additional-specification > table > tr') 
book_parsed_page.css('#book-additional-specification > table')
book_parsed_page.css('#book-additional-specification > table'>tr)
book_parsed_page.css('#book-additional-specification > table')['tr']
book_parsed_page.css('#book-additional-specification > table')
exit
